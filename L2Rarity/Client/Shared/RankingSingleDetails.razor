@using L2Rarity.Shared;
@using System.Globalization;
@inject IDialogService DialogService;
@inject HttpClient Http;
@implements IDisposable;


<MudCard class="d-inline-flex ma-2">
    <MudCardContent>
        <button><img src="@imageUrl" @onclick="@(async () => await ShowRarity(@CollectionId!,@Ranking!.i!))" height="256" width="auto" loading="lazy" /></button>
        <br/>
        <MudText Typo="Typo.h6" Inline="true" Align="Align.Start" Color="Color.Warning">Rank @Ranking!.r </MudText>
        <MudText Typo="Typo.subtitle2" Inline="true" Align="Align.End">#@Ranking!.i</MudText>
        <br/>
        <MudText Typo="Typo.caption" Inline="true">Score @Ranking!.s</MudText>
        @if (GameStopNftListing != null || PricingEnabled == true)
        {
            if(PricingEnabled == true && Ranking?.p1 != "0")
            {
                <MudText Typo="Typo.caption" Inline="true" Align="Align.End"> | @ToString(Double.Parse(Ranking?.p1!),18) ETH</MudText>
                <MudText Typo="Typo.caption" Inline="true" Align="Align.End"> | <MudTooltip Text="@scorePriceRatio"><MudIconButton Icon="@Icons.Material.Filled.ShoppingCart" Href="@gamestopMarketplaceUrl" Target="_blank"></MudIconButton></MudTooltip></MudText>
            }
            else if (PricingEnabled == true && Ranking?.p1 == "0")
            {
                <MudText Typo="Typo.caption" Inline="true" Align="Align.End"> | N/A </MudText>
                <MudText Typo="Typo.caption" Inline="true" Align="Align.End"> | <MudIconButton Icon="@Icons.Material.Filled.ShoppingCart" Href="@gamestopMarketplaceUrl" Target="_blank"></MudIconButton></MudText>
            }
            else if (GameStopNftListing.Values.FirstOrDefault()!.loopringSaleInfo != null)
            {
                <MudText Typo="Typo.caption" Inline="true" Align="Align.End"> | @ToString(Double.Parse(GameStopNftListing.Values.FirstOrDefault()!.loopringSaleInfo!.minPricePerNftInWei!),18) ETH</MudText>
                <MudText Typo="Typo.caption" Inline="true" Align="Align.End"> | <MudTooltip Text="@scorePriceRatio"><MudIconButton Icon="@Icons.Material.Filled.ShoppingCart" Href="@gamestopMarketplaceUrl" Target="_blank"></MudIconButton></MudTooltip></MudText>
            }
            else if (GameStopNftListing.Values.FirstOrDefault()!.loopringSaleInfo == null)
            {
                <MudText Typo="Typo.caption" Inline="true" Align="Align.End"> | N/A </MudText>
                <MudText Typo="Typo.caption" Inline="true" Align="Align.End"> | <MudIconButton Icon="@Icons.Material.Filled.ShoppingCart" Href="@gamestopMarketplaceUrl" Target="_blank"></MudIconButton></MudText>
            }
            else
            {
                <MudText Typo="Typo.caption" Inline="true" Align="Align.End"> | <MudIconButton Icon="@Icons.Material.Filled.ShoppingCart" Href="@gamestopMarketplaceUrl" Target="_blank"></MudIconButton></MudText>
            }
        }
        else if(isLoading == true)
        {
            <MudText Typo="Typo.caption" Inline="true"> | Fetching price...</MudText>
        }
    </MudCardContent>
</MudCard>



@code {
    [Parameter]
    public Ranking? Ranking { get; set; }

    [Parameter]
    public string? CollectionId { get; set; }

    [Parameter]
    public int CollectionTotal { get; set; }

    [Parameter]
    public string? ContractAddress { get; set; }

    [Parameter]
    public MarketplaceEnum MarketplaceEnum {get;set;}

    [Parameter]
    public bool? PricingEnabled { get; set; }

    public Dictionary<string, Value>? GameStopNftListing { get; set; }

    public string? gamestopMarketplaceUrl { get; set; }

    public void Dispose()
    {
        cts.Cancel();
        cts.Dispose();
    }

    public string? scorePriceRatio
    {
        get
        {
            if(PricingEnabled == true)
            {
                return "Score/Price Ratio:" + ScorePriceRatio(Ranking!.s, Decimal.Parse(@ToString(Double.Parse(Ranking?.p1!), 18), NumberStyles.Number)).ToString("0.00");
            }
            else
            {
                return "Score/Price Ratio:" + ScorePriceRatio(Ranking!.s, Decimal.Parse(@ToString(Double.Parse(GameStopNftListing!.Values.FirstOrDefault()!.loopringSaleInfo!.minPricePerNftInWei!), 18), NumberStyles.Number)).ToString("0.00");
            }
        }
    }

    private async Task ShowRarity(string collectionId, string id)
    {
        string idParam = $"{collectionId},{id}";
        var parameters = new DialogParameters();
        parameters.Add("CollectionId", collectionId);
        parameters.Add("Id", id);
        parameters.Add("CollectionTotal", CollectionTotal);
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraExtraLarge, DisableBackdropClick = false, NoHeader = true };
        var dialog = DialogService.Show<RankingSingleDialog>(idParam, parameters, options);
        var result = await dialog.Result;
    }
    CancellationTokenSource cts = new CancellationTokenSource();

    bool isLoading = false;

    private string? imageUrl { get; set; }
    protected override async Task OnInitializedAsync()
    {
        if(Ranking != null)
        {
            if(Ranking.im!.Contains("ipfs://"))
            {
                imageUrl = $"https://loopring.mypinata.cloud/ipfs/{Ranking.im.Remove(0, 7)}?img-height=256";
            }
            else
            {
                imageUrl = $"https://loopring.mypinata.cloud/ipfs/{Ranking.im}?img-height=256";
            }
        }
        if(PricingEnabled == true)
        {
            gamestopMarketplaceUrl = $"https://nft.gamestop.com/token/{ContractAddress}/{Ranking.ti}";
        }
        else if(MarketplaceEnum == MarketplaceEnum.Gamestop)
        {
            isLoading = true;
            GameStopNftListing = await Http.GetFromJsonAsync<Dictionary<string, Value>>($"api/gamestop/listing?nftId={Ranking!.ni}", cts.Token);
            gamestopMarketplaceUrl = $"https://nft.gamestop.com/token/{ContractAddress}/{Ranking.ti}";
            isLoading = false;
        }
        StateHasChanged();
    }

    private CultureInfo Culture = CultureInfo.CurrentCulture;

    private decimal ScorePriceRatio(decimal rarityScore, decimal price)
    {
        return rarityScore / price;
    }

    private decimal ToDecimal(Double? balance, int? decimals, decimal conversionRate = 1)
    {
        if (balance == null) return 0;
        return (decimal)(((decimals ?? 0) > 0) ? balance / Math.Pow(10, (double)decimals!) : balance) * conversionRate;
    }

    private string ToString(Double? balance, int? decimals, decimal conversionRate = 1)
    {
        if (balance == null) return "";

        decimal floatBalance = ToDecimal(balance, decimals, conversionRate);
        string format = "";
        if (decimals != null)
        {
            //reduce digits, the larger balance is, i.e. exponent (never reduce digits, if sub zero)
            int formatDecimals = Math.Max(decimals.Value - Math.Max((int)Math.Log10(Math.Abs((double)floatBalance)), 0), 0);
            format = $"#,###0.{new string('#', formatDecimals)}";
        }
        return floatBalance.ToString(format, Culture);
    }

    private decimal ToDecimalWithExponent(decimal amount, out string exponentPrefix)
    {
        exponentPrefix = "";
        if (amount == 0) return amount;

        //get the exponent - sign doesn't matter, i.e. 6 for 1,000,000 aka 1E6
        var exponent = Math.Log10((double)Math.Abs(amount));

        //we since we're only interested in k, M and B, keep it simple
        if (exponent >= 9)
        {
            exponentPrefix = "B";
            return amount / (decimal)1E9;
        }
        else if (exponent >= 6)
        {
            exponentPrefix = "M";
            return amount / (decimal)1E6;
        }
        else if (exponent >= 3)
        {
            exponentPrefix = "k";
            return amount / (decimal)1E3;
        }
        else
            return amount;
    }

    private string ToStringWithExponent(double num, int decimals, decimal conversionRate, string format = "N3")
    {
        string expPrefix = "";
        decimal amount = ToDecimalWithExponent(ToDecimal(num, decimals, conversionRate), out expPrefix);
        return amount.ToString(format, Culture) + expPrefix;
    }
}
